What happens when you initialize a repository? Why do you need to do it?
	
	when you initialize a git repository, you create a space in memory for metadata. You need to do it because otherwise git will not know where to store metadata.
	
How is the staging area different from the working directory and the repository? What value do you think it offers?

	The staging area is an intermediary between the working directory and the repository. It offers the flexibility of choosing exactly which files to bundle together for each commit. that way when you look back at your commit history, you'll see which files you modified on each commit.
	
How can you use the staging area to make sure you have one commit per logical change?
	
	you can use git diff and git diff --staged to see what files are modified between the staging area and the working directory and the head.
	
What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	branches are very useful for developing new features while keeping the main application running. 
	
How do the diagrams help you visualize the branch structure?

	The diagrams were very helpful to understand branches and commits as well as the head and detached head state.
	
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	The result of merging two branches together is that the changes made in both branches will now be present in the master branch. also the branch history will show all the commits in both branches. we still represent it in a separate branch that connects because not all the commits are the parents of eachother. the current commit will have two parents, the master branch and the merged branch. each commit in these will have its own parents.
	
What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

	the pros of git's automatic merging is that it does the work for you, however it may introduce problems. always doing merges manually would be for precise but take a lot more work and time. git seems to be pretty good at knowing when to merge and when to call conflict
